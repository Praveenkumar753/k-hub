{"ast":null,"code":"import api from './api';\nimport { userService } from './userService';\nexport const authService = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  },\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  isAdmin: () => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  }\n};\nexport const contestService = {\n  // User contest services\n  getContests: async () => {\n    const response = await api.get('/contests');\n    return response.data;\n  },\n  getContest: async id => {\n    const response = await api.get(`/contests/${id}`);\n    return response.data;\n  },\n  getQuestion: async (contestId, questionId) => {\n    const response = await api.get(`/contests/${contestId}/questions/${questionId}`);\n    return response.data;\n  },\n  // Admin contest services\n  createContest: async contestData => {\n    const response = await api.post('/admin/contests', contestData);\n    return response.data;\n  },\n  updateContest: async (id, contestData) => {\n    const response = await api.put(`/admin/contests/${id}`, contestData);\n    return response.data;\n  },\n  deleteContest: async id => {\n    const response = await api.delete(`/admin/contests/${id}`);\n    return response.data;\n  },\n  getAdminContests: async () => {\n    const response = await api.get('/admin/contests');\n    return response.data;\n  },\n  getAdminContest: async id => {\n    const response = await api.get(`/admin/contests/${id}`);\n    return response.data;\n  },\n  addQuestion: async (contestId, questionData) => {\n    const response = await api.post(`/admin/contests/${contestId}/questions`, questionData);\n    return response.data;\n  },\n  updateQuestion: async (contestId, questionId, questionData) => {\n    const response = await api.put(`/admin/contests/${contestId}/questions/${questionId}`, questionData);\n    return response.data;\n  },\n  deleteQuestion: async (contestId, questionId) => {\n    const response = await api.delete(`/admin/contests/${contestId}/questions/${questionId}`);\n    return response.data;\n  },\n  getContestStats: async contestId => {\n    const response = await api.get(`/admin/contests/${contestId}/stats`);\n    return response.data;\n  }\n};\nexport const submissionService = {\n  submitCode: async submissionData => {\n    const response = await api.post('/submissions', submissionData);\n    return response.data;\n  },\n  runCode: async codeData => {\n    const response = await api.post('/submissions/run', codeData);\n    return response.data;\n  },\n  getSubmission: async id => {\n    const response = await api.get(`/submissions/${id}`);\n    return response.data;\n  },\n  getUserSubmissions: async contestId => {\n    const response = await api.get(`/submissions/contest/${contestId}/user`);\n    return response.data;\n  },\n  getQuestionSubmissions: async (contestId, questionId) => {\n    const response = await api.get(`/submissions/contest/${contestId}/question/${questionId}/user`);\n    return response.data;\n  },\n  // Admin submission services\n  getAllSubmissions: async (contestId, userId) => {\n    const params = new URLSearchParams();\n    if (contestId) params.append('contestId', contestId);\n    if (userId) params.append('userId', userId);\n    const response = await api.get(`/admin/submissions?${params.toString()}`);\n    return response.data;\n  },\n  getSubmissionDetails: async id => {\n    const response = await api.get(`/admin/submissions/${id}`);\n    return response.data;\n  }\n};\nexport { userService };","map":{"version":3,"names":["api","userService","authService","login","email","password","response","post","data","token","localStorage","setItem","JSON","stringify","user","register","userData","logout","removeItem","window","location","href","getCurrentUser","parse","getItem","isAuthenticated","isAdmin","role","contestService","getContests","get","getContest","id","getQuestion","contestId","questionId","createContest","contestData","updateContest","put","deleteContest","delete","getAdminContests","getAdminContest","addQuestion","questionData","updateQuestion","deleteQuestion","getContestStats","submissionService","submitCode","submissionData","runCode","codeData","getSubmission","getUserSubmissions","getQuestionSubmissions","getAllSubmissions","userId","params","URLSearchParams","append","toString","getSubmissionDetails"],"sources":["/home/rcts/Desktop/k-hub/frontend/src/services/index.js"],"sourcesContent":["import api from './api';\r\nimport { userService } from './userService';\r\n\r\nexport const authService = {\r\n    login: async (email, password) => {\r\n        const response = await api.post('/auth/login', { email, password });\r\n        if (response.data.token) {\r\n            localStorage.setItem('token', response.data.token);\r\n            localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        }\r\n        return response.data;\r\n    },\r\n\r\n    register: async (userData) => {\r\n        const response = await api.post('/auth/register', userData);\r\n        if (response.data.token) {\r\n            localStorage.setItem('token', response.data.token);\r\n            localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        }\r\n        return response.data;\r\n    },\r\n\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n    },\r\n\r\n    getCurrentUser: () => {\r\n        return JSON.parse(localStorage.getItem('user'));\r\n    },\r\n\r\n    isAuthenticated: () => {\r\n        return !!localStorage.getItem('token');\r\n    },\r\n\r\n    isAdmin: () => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        return user?.role === 'admin';\r\n    }\r\n};\r\n\r\nexport const contestService = {\r\n    // User contest services\r\n    getContests: async () => {\r\n        const response = await api.get('/contests');\r\n        return response.data;\r\n    },\r\n\r\n    getContest: async (id) => {\r\n        const response = await api.get(`/contests/${id}`);\r\n        return response.data;\r\n    },\r\n\r\n    getQuestion: async (contestId, questionId) => {\r\n        const response = await api.get(`/contests/${contestId}/questions/${questionId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // Admin contest services\r\n    createContest: async (contestData) => {\r\n        const response = await api.post('/admin/contests', contestData);\r\n        return response.data;\r\n    },\r\n\r\n    updateContest: async (id, contestData) => {\r\n        const response = await api.put(`/admin/contests/${id}`, contestData);\r\n        return response.data;\r\n    },\r\n\r\n    deleteContest: async (id) => {\r\n        const response = await api.delete(`/admin/contests/${id}`);\r\n        return response.data;\r\n    },\r\n\r\n    getAdminContests: async () => {\r\n        const response = await api.get('/admin/contests');\r\n        return response.data;\r\n    },\r\n\r\n    getAdminContest: async (id) => {\r\n        const response = await api.get(`/admin/contests/${id}`);\r\n        return response.data;\r\n    },\r\n\r\n    addQuestion: async (contestId, questionData) => {\r\n        const response = await api.post(`/admin/contests/${contestId}/questions`, questionData);\r\n        return response.data;\r\n    },\r\n\r\n    updateQuestion: async (contestId, questionId, questionData) => {\r\n        const response = await api.put(`/admin/contests/${contestId}/questions/${questionId}`, questionData);\r\n        return response.data;\r\n    },\r\n\r\n    deleteQuestion: async (contestId, questionId) => {\r\n        const response = await api.delete(`/admin/contests/${contestId}/questions/${questionId}`);\r\n        return response.data;\r\n    },\r\n\r\n    getContestStats: async (contestId) => {\r\n        const response = await api.get(`/admin/contests/${contestId}/stats`);\r\n        return response.data;\r\n    }\r\n};\r\n\r\nexport const submissionService = {\r\n    submitCode: async (submissionData) => {\r\n        const response = await api.post('/submissions', submissionData);\r\n        return response.data;\r\n    },\r\n\r\n    runCode: async (codeData) => {\r\n        const response = await api.post('/submissions/run', codeData);\r\n        return response.data;\r\n    },\r\n\r\n    getSubmission: async (id) => {\r\n        const response = await api.get(`/submissions/${id}`);\r\n        return response.data;\r\n    },\r\n\r\n    getUserSubmissions: async (contestId) => {\r\n        const response = await api.get(`/submissions/contest/${contestId}/user`);\r\n        return response.data;\r\n    },\r\n\r\n    getQuestionSubmissions: async (contestId, questionId) => {\r\n        const response = await api.get(`/submissions/contest/${contestId}/question/${questionId}/user`);\r\n        return response.data;\r\n    },\r\n\r\n    // Admin submission services\r\n    getAllSubmissions: async (contestId, userId) => {\r\n        const params = new URLSearchParams();\r\n        if (contestId) params.append('contestId', contestId);\r\n        if (userId) params.append('userId', userId);\r\n        \r\n        const response = await api.get(`/admin/submissions?${params.toString()}`);\r\n        return response.data;\r\n    },\r\n\r\n    getSubmissionDetails: async (id) => {\r\n        const response = await api.get(`/admin/submissions/${id}`);\r\n        return response.data;\r\n    }\r\n};\r\n\r\nexport { userService };\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,SAASC,WAAW,QAAQ,eAAe;AAE3C,OAAO,MAAMC,WAAW,GAAG;EACvBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC9B,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACnE,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACrBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IACpE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDO,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC1B,MAAMV,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,gBAAgB,EAAES,QAAQ,CAAC;IAC3D,IAAIV,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACrBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IACpE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDS,MAAM,EAAEA,CAAA,KAAM;IACVP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACnC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IAClB,OAAOV,IAAI,CAACW,KAAK,CAACb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC,CAAC;EACnD,CAAC;EAEDC,eAAe,EAAEA,CAAA,KAAM;IACnB,OAAO,CAAC,CAACf,YAAY,CAACc,OAAO,CAAC,OAAO,CAAC;EAC1C,CAAC;EAEDE,OAAO,EAAEA,CAAA,KAAM;IACX,MAAMZ,IAAI,GAAGF,IAAI,CAACW,KAAK,CAACb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,OAAO,CAAAV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,IAAI,MAAK,OAAO;EACjC;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG;EAC1B;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACrB,MAAMvB,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOxB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDuB,UAAU,EAAE,MAAOC,EAAE,IAAK;IACtB,MAAM1B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;IACjD,OAAO1B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDyB,WAAW,EAAE,MAAAA,CAAOC,SAAS,EAAEC,UAAU,KAAK;IAC1C,MAAM7B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,aAAaI,SAAS,cAAcC,UAAU,EAAE,CAAC;IAChF,OAAO7B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACA4B,aAAa,EAAE,MAAOC,WAAW,IAAK;IAClC,MAAM/B,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,iBAAiB,EAAE8B,WAAW,CAAC;IAC/D,OAAO/B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED8B,aAAa,EAAE,MAAAA,CAAON,EAAE,EAAEK,WAAW,KAAK;IACtC,MAAM/B,QAAQ,GAAG,MAAMN,GAAG,CAACuC,GAAG,CAAC,mBAAmBP,EAAE,EAAE,EAAEK,WAAW,CAAC;IACpE,OAAO/B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDgC,aAAa,EAAE,MAAOR,EAAE,IAAK;IACzB,MAAM1B,QAAQ,GAAG,MAAMN,GAAG,CAACyC,MAAM,CAAC,mBAAmBT,EAAE,EAAE,CAAC;IAC1D,OAAO1B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDkC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAMpC,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,iBAAiB,CAAC;IACjD,OAAOxB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDmC,eAAe,EAAE,MAAOX,EAAE,IAAK;IAC3B,MAAM1B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,mBAAmBE,EAAE,EAAE,CAAC;IACvD,OAAO1B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDoC,WAAW,EAAE,MAAAA,CAAOV,SAAS,EAAEW,YAAY,KAAK;IAC5C,MAAMvC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,mBAAmB2B,SAAS,YAAY,EAAEW,YAAY,CAAC;IACvF,OAAOvC,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDsC,cAAc,EAAE,MAAAA,CAAOZ,SAAS,EAAEC,UAAU,EAAEU,YAAY,KAAK;IAC3D,MAAMvC,QAAQ,GAAG,MAAMN,GAAG,CAACuC,GAAG,CAAC,mBAAmBL,SAAS,cAAcC,UAAU,EAAE,EAAEU,YAAY,CAAC;IACpG,OAAOvC,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDuC,cAAc,EAAE,MAAAA,CAAOb,SAAS,EAAEC,UAAU,KAAK;IAC7C,MAAM7B,QAAQ,GAAG,MAAMN,GAAG,CAACyC,MAAM,CAAC,mBAAmBP,SAAS,cAAcC,UAAU,EAAE,CAAC;IACzF,OAAO7B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDwC,eAAe,EAAE,MAAOd,SAAS,IAAK;IAClC,MAAM5B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,mBAAmBI,SAAS,QAAQ,CAAC;IACpE,OAAO5B,QAAQ,CAACE,IAAI;EACxB;AACJ,CAAC;AAED,OAAO,MAAMyC,iBAAiB,GAAG;EAC7BC,UAAU,EAAE,MAAOC,cAAc,IAAK;IAClC,MAAM7C,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,cAAc,EAAE4C,cAAc,CAAC;IAC/D,OAAO7C,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED4C,OAAO,EAAE,MAAOC,QAAQ,IAAK;IACzB,MAAM/C,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,kBAAkB,EAAE8C,QAAQ,CAAC;IAC7D,OAAO/C,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED8C,aAAa,EAAE,MAAOtB,EAAE,IAAK;IACzB,MAAM1B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,gBAAgBE,EAAE,EAAE,CAAC;IACpD,OAAO1B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED+C,kBAAkB,EAAE,MAAOrB,SAAS,IAAK;IACrC,MAAM5B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,wBAAwBI,SAAS,OAAO,CAAC;IACxE,OAAO5B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDgD,sBAAsB,EAAE,MAAAA,CAAOtB,SAAS,EAAEC,UAAU,KAAK;IACrD,MAAM7B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,wBAAwBI,SAAS,aAAaC,UAAU,OAAO,CAAC;IAC/F,OAAO7B,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAiD,iBAAiB,EAAE,MAAAA,CAAOvB,SAAS,EAAEwB,MAAM,KAAK;IAC5C,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAI1B,SAAS,EAAEyB,MAAM,CAACE,MAAM,CAAC,WAAW,EAAE3B,SAAS,CAAC;IACpD,IAAIwB,MAAM,EAAEC,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC;IAE3C,MAAMpD,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,sBAAsB6B,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;IACzE,OAAOxD,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDuD,oBAAoB,EAAE,MAAO/B,EAAE,IAAK;IAChC,MAAM1B,QAAQ,GAAG,MAAMN,GAAG,CAAC8B,GAAG,CAAC,sBAAsBE,EAAE,EAAE,CAAC;IAC1D,OAAO1B,QAAQ,CAACE,IAAI;EACxB;AACJ,CAAC;AAED,SAASP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}